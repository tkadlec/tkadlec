---
layout: post
title: "Understanding Proxy Browsers: Architecture"
date: 2015-07-28 09:47:59 -0500
comments: true
categories: 
tags: 
- mobile
- performance
- proxy browsers
---
_I did a bunch of research on proxy-browsers for a few projects I worked on. Rather than sitting on it all, I figured I’d write a series of posts sharing what I learned in case it’s helpful to anyone else. This first post looks at the general architecture of proxy browsers with a performance focus._

In the original story of the Wizard of Oz, the Emerald City isn't actually green nor made entirely of emeralds. All of that came later. In the original story, before entering the city each person had to put on a pair of glasses. These glasses, they were told, would protect them from the bright glow of all the emeralds that would surely damage their sight. These glasses were attached and never removed. You wore them while eating, while going to the bathroom, while walking outside—you wore them everywhere and all the time. 

This was all a ruse. The glow of the city wouldn't damage anybody's sight because there was no glow. That all came from the glasses which just happened to be tinted green. Through the lens of those glasses, _everything_ glowed. The lens through which those people viewed their world shaped their perception of it.

I’d venture to say that most developers and designers are not big fans of proxy browsers—assuming they pay attention to them at all. They don’t behave in ways a typical browser does, which leads to frustration as we see our carefully created sites fall apart for seemingly no reason at all. And frankly, most of us don’t really need to use them on a day-to-day basis. Through the lens we view the web, proxy browsers are merely troublesome relics of a time before the idea of a "smartphone" was anything other than a pipedream.

But our view of the web is not the only view of the web. People all over the world face challenges getting online—everything from the cost of data and poor connectivity to religious and political obstacles. In these environments proxy browsers are far from troublesome; they are essential. 

So while most of us building for the web have never used a proxy browser (outside of the quick spot check in Opera Mini, perhaps), they remain incredibly popular globally. Opera Mini, the most popular of all proxy browsers, boasts more than 250 million users. UC, another popular proxy browser, boasts 100 million daily active users and is the most popular mobile browser in India, China and Indonesia.

These browsers perform optimizations and transcoding that can provide significant improvements. Several proxy browsers claim up to 90% data savings when compared to a typical browser. That’s the difference between a 2MB site and a 200kb site—nothing to sneeze at.

To understand how they accomplish this—and why they behave the way they do—we first need to revisit what we know about how browsers work.

## Typical Browser Architecture
<svg class="diagram" xmlns="http://www.w3.org/2000/svg" width="440.3" height="144.2" viewBox="0 0 440.3 144.2"><path fill="#010101" d="M64.8 0H13.5C6.1 0 0 6.1 0 13.5v105.3c0 7.4 6.1 13.5 13.5 13.5h51.3c7.4 0 13.5-6.1 13.5-13.5V13.5C78.3 6.1 72.2 0 64.8 0zM38.7 125.1c-3.6 0-6.7-3-6.7-6.7 0-3.6 3-6.7 6.7-6.7 3.8 0 6.7 3 6.7 6.7s-3 6.7-6.7 6.7zm28.8-18.5H10.8V17.5h56.7v89.1zM434.1 47H311.4c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2h122.8c3.4 0 6.2-2.8 6.2-6.2V53.2c-.1-3.4-2.8-6.2-6.3-6.2zm-37.8 25.6H319v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6zm10 19.8H311.4c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2h122.8c3.4 0 6.2-2.8 6.2-6.2V98.2c-.1-3.4-2.8-6.2-6.3-6.2zm-37.8 25.6H319v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6 0-3.1 2.5-5.6 5.6-5.6 3.1 0 5.6 2.5 5.6 5.6 0 3.1-2.5 5.6-5.6 5.6zM434.1 1H311.4c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2h122.8c3.4 0 6.2-2.8 6.2-6.2V7.2c-.1-3.4-2.8-6.2-6.3-6.2zm-37.8 25.6H319v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M102.3 84.8h175.6"/><path fill="#CE561E" d="M261.2 96.6c-.4-.6-.2-1.3.4-1.7l15.7-10-15.7-10c-.6-.4-.7-1.1-.4-1.7.4-.6 1.1-.7 1.7-.4l17.4 11.1c.4.2.6.6.6 1s-.2.8-.6 1L262.9 97c-.2.1-.4.2-.7.2-.4-.1-.8-.3-1-.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M280.8 46.6H105.2"/><path fill="#CE561E" d="M121.9 34.8c.4.6.2 1.3-.4 1.7l-15.7 10 15.7 10c.6.4.7 1.1.4 1.7-.4.6-1.1.7-1.7.4l-17.4-11.1c-.4-.2-.6-.6-.6-1s.2-.8.6-1l17.4-11.1c.2-.1.4-.2.7-.2.4.1.8.3 1 .6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M102.3 13.6h175.6"/><path fill="#CE561E" d="M261.2 25.3c-.4-.6-.2-1.3.4-1.7l15.7-10-15.7-10c-.6-.4-.7-1.1-.4-1.7.4-.6 1.1-.7 1.7-.4l17.4 11.1c.4.2.6.6.6 1s-.2.8-.6 1l-17.4 11.1c-.2.1-.4.2-.7.2-.4 0-.8-.2-1-.6z"/><g><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M280.8 119.3H105.2"/><path fill="#CE561E" d="M121.9 107.6c.4.6.2 1.3-.4 1.7l-15.7 10 15.7 10c.6.4.7 1.1.4 1.7-.4.6-1.1.7-1.7.4l-17.4-11.1c-.4-.2-.6-.6-.6-1s.2-.8.6-1l17.4-11.1c.2-.1.4-.2.7-.2.4.1.8.3 1 .6z"/></g><circle fill="#010101" stroke="#FFF" stroke-width="4" stroke-miterlimit="10" cx="59.9" cy="106.2" r="35.9"/><g fill="#FFF" stroke="#010101" stroke-miterlimit="10"><path d="M47.2 97.3l-9.6 9.7 9.6 9.7c.9.9 2.3.9 3.2 0 .9-.9.9-2.3 0-3.2l-6.1-6.2-1.8 1.2 7.9-8c.4-.4.7-1 .7-1.6 0-.6-.2-1.2-.7-1.6-.9-.9-2.4-.9-3.2 0zM73.5 97.3l9.6 9.7-9.6 9.7c-.9.9-2.3.9-3.2 0-.9-.9-.9-2.3 0-3.2l6.1-6.2 1.8 1.2-7.9-8c-.4-.4-.7-1-.7-1.6s.2-1.2.7-1.6c.9-.9 2.4-.9 3.2 0zM65.9 98.1c-.2-.5-.6-1-1.2-1.3-1.1-.5-2.5 0-2.9 1.2l-7 16.2c-.2.6-.2 1.2 0 1.7s.6 1 1.2 1.3c1.1.5 2.5 0 2.9-1.2l7-16.2c.2-.6.2-1.2 0-1.7z"/></g></svg>

A typical modern browser goes through a series of steps to go from the URL you enter in your address bar to the page you ultimately see on your screen. It must:

1. Resolve the DNS
2. Establish TCP connection(s) to the server(s)
3. Request all the resources on a page
4. Construct a DOM and CSSOM
5. Build a render tree
6. Perform layout
7. Decode images
8. Paint to the screen

That’s a _very_ simplified list and some of them can happen in parallel, but it’s a good enough representation for the purpose of highlighting how proxy browser architecture differs.

We can break these steps out into two general buckets. Steps 1-3 are all _network constrained_. How quickly they happen, and the cost, depends mostly on the characteristics of the network: the bandwidth, latency, cost of data, etc.

Steps 4-8 are _device constrained_. How quickly these steps happen depends primarily on the characteristics of the device and browser: the processor, memory, etc.

Proxy browsers intercede on behalf of the user in an attempt to reduce the impact of one, or both, of these buckets. You can broadly classify them into two categories: browsers with proxy services, and remote browsers.

## Browsers with proxy services
<svg class="diagram" xmlns="http://www.w3.org/2000/svg" width="815.2" height="144.2" viewBox="0 0 815.2 144.2"><path fill="#010101" d="M64.8 0H13.5C6.1 0 0 6.1 0 13.5v105.3c0 7.4 6.1 13.5 13.5 13.5h51.3c7.4 0 13.5-6.1 13.5-13.5V13.5C78.3 6.1 72.2 0 64.8 0zM38.7 125.1c-3.6 0-6.7-3-6.7-6.7 0-3.6 3-6.7 6.7-6.7 3.8 0 6.7 3 6.7 6.7s-3 6.7-6.7 6.7zm28.8-18.5H10.8V17.5h56.7v89.1zM434.1 47H311.4c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2h122.8c3.4 0 6.2-2.8 6.2-6.2V53.2c-.1-3.4-2.8-6.2-6.3-6.2zm-37.8 25.6H319v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6zm10 19.8H311.4c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2h122.8c3.4 0 6.2-2.8 6.2-6.2V98.2c-.1-3.4-2.8-6.2-6.3-6.2zm-37.8 25.6H319v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6 0-3.1 2.5-5.6 5.6-5.6 3.1 0 5.6 2.5 5.6 5.6 0 3.1-2.5 5.6-5.6 5.6zM434.1 1H311.4c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2h122.8c3.4 0 6.2-2.8 6.2-6.2V7.2c-.1-3.4-2.8-6.2-6.3-6.2zm-37.8 25.6H319v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M102.3 84.8h175.6"/><path fill="#CE561E" d="M261.2 96.6c-.4-.6-.2-1.3.4-1.7l15.7-10-15.7-10c-.6-.4-.7-1.1-.4-1.7.4-.6 1.1-.7 1.7-.4l17.4 11.1c.4.2.6.6.6 1s-.2.8-.6 1L262.9 97c-.2.1-.4.2-.7.2-.4-.1-.8-.3-1-.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M280.8 46.6H105.2"/><path fill="#CE561E" d="M121.9 34.8c.4.6.2 1.3-.4 1.7l-15.7 10 15.7 10c.6.4.7 1.1.4 1.7-.4.6-1.1.7-1.7.4l-17.4-11.1c-.4-.2-.6-.6-.6-1s.2-.8.6-1l17.4-11.1c.2-.1.4-.2.7-.2.4.1.8.3 1 .6z"/><path fill="#010101" d="M809 47H686.2c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2H809c3.4 0 6.2-2.8 6.2-6.2V53.2c0-3.4-2.8-6.2-6.2-6.2zm-37.9 25.6h-77.3v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6zM809 92H686.2c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2H809c3.4 0 6.2-2.8 6.2-6.2V98.2c0-3.4-2.8-6.2-6.2-6.2zm-37.9 25.6h-77.3v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6 0-3.1 2.5-5.6 5.6-5.6 3.1 0 5.6 2.5 5.6 5.6 0 3.1-2.5 5.6-5.6 5.6zM809 1H686.2c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2H809c3.4 0 6.2-2.8 6.2-6.2V7.2c0-3.4-2.8-6.2-6.2-6.2zm-37.9 25.6h-77.3v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M102.3 13.6h175.6"/><path fill="#CE561E" d="M261.2 25.3c-.4-.6-.2-1.3.4-1.7l15.7-10-15.7-10c-.6-.4-.7-1.1-.4-1.7.4-.6 1.1-.7 1.7-.4l17.4 11.1c.4.2.6.6.6 1s-.2.8-.6 1l-17.4 11.1c-.2.1-.4.2-.7.2-.4 0-.8-.2-1-.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M280.8 119.3H105.2"/><path fill="#CE561E" d="M121.9 107.6c.4.6.2 1.3-.4 1.7l-15.7 10 15.7 10c.6.4.7 1.1.4 1.7-.4.6-1.1.7-1.7.4l-17.4-11.1c-.4-.2-.6-.6-.6-1s.2-.8.6-1l17.4-11.1c.2-.1.4-.2.7-.2.4.1.8.3 1 .6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M473.3 84.5h175.6"/><path fill="#CE561E" d="M632.2 96.2c-.4-.6-.2-1.3.4-1.7l15.7-10-15.7-10c-.6-.4-.7-1.1-.4-1.7.4-.6 1.1-.7 1.7-.4l17.4 11.1c.4.2.6.6.6 1s-.2.8-.6 1l-17.4 11.1c-.2.1-.4.2-.7.2-.4 0-.8-.2-1-.6z"/><g><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M651.8 46.2H476.2"/><path fill="#CE561E" d="M492.9 34.5c.4.6.2 1.3-.4 1.7l-15.7 10 15.7 10c.6.4.7 1.1.4 1.7-.4.6-1.1.7-1.7.4l-17.4-11.1c-.4-.2-.6-.6-.6-1s.2-.8.6-1l17.4-11.1c.2-.1.4-.2.7-.2.4.1.8.3 1 .6z"/></g><g><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M473.3 13.3h175.6"/><path fill="#CE561E" d="M632.2 25c-.4-.6-.2-1.3.4-1.7l15.7-10-15.7-10c-.6-.4-.7-1.1-.4-1.7.4-.6 1.1-.7 1.7-.4l17.4 11.1c.4.2.6.6.6 1s-.2.8-.6 1l-17.4 11.1c-.2.1-.4.2-.7.2-.4-.1-.8-.3-1-.6z"/></g><g><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M651.8 119H476.2"/><path fill="#CE561E" d="M492.9 107.3c.4.6.2 1.3-.4 1.7l-15.7 10 15.7 10c.6.4.7 1.1.4 1.7-.4.6-1.1.7-1.7.4L473.8 120c-.4-.2-.6-.6-.6-1s.2-.8.6-1l17.4-11.1c.2-.1.4-.2.7-.2.4 0 .8.2 1 .6z"/></g><circle fill="#010101" stroke="#FFF" stroke-width="4" stroke-miterlimit="10" cx="59.9" cy="106.2" r="35.9"/><g fill="#FFF" stroke="#010101" stroke-miterlimit="10"><path d="M47.2 97.3l-9.6 9.7 9.6 9.7c.9.9 2.3.9 3.2 0 .9-.9.9-2.3 0-3.2l-6.1-6.2-1.8 1.2 7.9-8c.4-.4.7-1 .7-1.6 0-.6-.2-1.2-.7-1.6-.9-.9-2.4-.9-3.2 0zM73.5 97.3l9.6 9.7-9.6 9.7c-.9.9-2.3.9-3.2 0-.9-.9-.9-2.3 0-3.2l6.1-6.2 1.8 1.2-7.9-8c-.4-.4-.7-1-.7-1.6s.2-1.2.7-1.6c.9-.9 2.4-.9 3.2 0zM65.9 98.1c-.2-.5-.6-1-1.2-1.3-1.1-.5-2.5 0-2.9 1.2l-7 16.2c-.2.6-.2 1.2 0 1.7s.6 1 1.2 1.3c1.1.5 2.5 0 2.9-1.2l7-16.2c.2-.6.2-1.2 0-1.7z"/></g></svg>

The first category of proxy browsers are really just your plain-old, everyday browser that happens to offer a proxy service. These browsers alter the typical browser behavior only slightly, and as a result they provide the least benefit for end users as well as—usually—the least noticeable impact on the display and behavior of a web site. (While not really tied to a browser, look at [Google's search transcoding service](http://googleweblight.com/) for an example of how substantially a proxy service _could_ alter the display of a page.)

Instead of requests being routed directly from the client to the web server, they are first routed through some intermediary layer of servers (Google’s servers, UC’s servers, Opera’s servers, etc). This intermediary layer provides the proxy service. It routes the request to the web server on behalf of the client. Upon receipt of the request, it sees if there are any optimizations it can provide (such as minification, image compression, etc) before passing back the potentially altered response to the client.

The browser-specific behavior (steps 4-8) remains the same as the typical browsers you're used to testing on. All of the optimizations that take place focus primarily on the reducing the impact on the network (1-3).

There are many examples but at the moment of writing some of the more popular options in this category are Google’s Data Compression tool (Flywheel), UC Web’s Cloud Boost, and Opera Turbo.

## Remote browsers
<svg class="diagram" xmlns="http://www.w3.org/2000/svg" width="815.2" height="140" viewBox="0 0 815.2 140"><path fill="#010101" d="M64.8 0H13.5C6.1 0 0 6.1 0 13.5v105.3c0 7.4 6.1 13.5 13.5 13.5h51.3c7.4 0 13.5-6.1 13.5-13.5V13.5C78.3 6.1 72.2 0 64.8 0zM38.7 125.1c-3.6 0-6.7-3-6.7-6.7 0-3.6 3-6.7 6.7-6.7 3.8 0 6.7 3 6.7 6.7s-3 6.7-6.7 6.7zm28.8-18.5H10.8V17.5h56.7v89.1zM434.1 47H311.4c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2h122.8c3.4 0 6.2-2.8 6.2-6.2V53.2c-.1-3.4-2.8-6.2-6.3-6.2zm-37.8 25.6H319v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6zm10 19.8H311.4c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2h122.8c3.4 0 6.2-2.8 6.2-6.2V98.2c-.1-3.4-2.8-6.2-6.3-6.2zm-37.8 25.6H319v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6 0-3.1 2.5-5.6 5.6-5.6 3.1 0 5.6 2.5 5.6 5.6 0 3.1-2.5 5.6-5.6 5.6zM434.1 1H311.4c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2h122.8c3.4 0 6.2-2.8 6.2-6.2V7.2c-.1-3.4-2.8-6.2-6.3-6.2zm-37.8 25.6H319v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M280.8 82.6H105.2"/><path fill="#CE561E" d="M121.9 70.9c.4.6.2 1.3-.4 1.7l-15.7 10 15.7 10c.6.4.7 1.1.4 1.7-.4.6-1.1.7-1.7.4l-17.4-11.1c-.4-.2-.6-.6-.6-1s.2-.8.6-1l17.4-11.1c.2-.1.4-.2.7-.2.4.1.8.3 1 .6z"/><path fill="#010101" d="M809 47H686.2c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2H809c3.4 0 6.2-2.8 6.2-6.2V53.2c0-3.4-2.8-6.2-6.2-6.2zm-37.9 25.6h-77.3v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6zM809 92H686.2c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2H809c3.4 0 6.2-2.8 6.2-6.2V98.2c0-3.4-2.8-6.2-6.2-6.2zm-37.9 25.6h-77.3v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6 0-3.1 2.5-5.6 5.6-5.6 3.1 0 5.6 2.5 5.6 5.6 0 3.1-2.5 5.6-5.6 5.6zM809 1H686.2c-3.4 0-6.2 2.8-6.2 6.2v26.9c0 3.4 2.8 6.2 6.2 6.2H809c3.4 0 6.2-2.8 6.2-6.2V7.2c0-3.4-2.8-6.2-6.2-6.2zm-37.9 25.6h-77.3v-12h77.3v12zm27.8-.4c-3.1 0-5.6-2.5-5.6-5.6s2.5-5.6 5.6-5.6c3.1 0 5.6 2.5 5.6 5.6s-2.5 5.6-5.6 5.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M102.3 49.7h175.6"/><path fill="#CE561E" d="M261.2 61.4c-.4-.6-.2-1.3.4-1.7l15.7-10-15.7-10c-.6-.4-.7-1.1-.4-1.7.4-.6 1.1-.7 1.7-.4l17.4 11.1c.4.2.6.6.6 1s-.2.8-.6 1l-17.4 11.1c-.2.1-.4.2-.7.2-.4-.1-.8-.3-1-.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M473.3 84.5h175.6"/><path fill="#CE561E" d="M632.2 96.2c-.4-.6-.2-1.3.4-1.7l15.7-10-15.7-10c-.6-.4-.7-1.1-.4-1.7.4-.6 1.1-.7 1.7-.4l17.4 11.1c.4.2.6.6.6 1s-.2.8-.6 1l-17.4 11.1c-.2.1-.4.2-.7.2-.4 0-.8-.2-1-.6z"/><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M651.8 46.2H476.2"/><path fill="#CE561E" d="M492.9 34.5c.4.6.2 1.3-.4 1.7l-15.7 10 15.7 10c.6.4.7 1.1.4 1.7-.4.6-1.1.7-1.7.4l-17.4-11.1c-.4-.2-.6-.6-.6-1s.2-.8.6-1l17.4-11.1c.2-.1.4-.2.7-.2.4.1.8.3 1 .6z"/><g><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M473.3 13.3h175.6"/><path fill="#CE561E" d="M632.2 25c-.4-.6-.2-1.3.4-1.7l15.7-10-15.7-10c-.6-.4-.7-1.1-.4-1.7.4-.6 1.1-.7 1.7-.4l17.4 11.1c.4.2.6.6.6 1s-.2.8-.6 1l-17.4 11.1c-.2.1-.4.2-.7.2-.4-.1-.8-.3-1-.6z"/></g><g><path fill="none" stroke="#CE561E" stroke-width="4" stroke-miterlimit="10" d="M651.8 119H476.2"/><path fill="#CE561E" d="M492.9 107.3c.4.6.2 1.3-.4 1.7l-15.7 10 15.7 10c.6.4.7 1.1.4 1.7-.4.6-1.1.7-1.7.4L473.8 120c-.4-.2-.6-.6-.6-1s.2-.8.6-1l17.4-11.1c.2-.1.4-.2.7-.2.4 0 .8.2 1 .6z"/></g><circle fill="#010101" stroke="#FFF" stroke-width="4" stroke-miterlimit="10" cx="430.3" cy="102.1" r="35.9"/><g fill="#FFF" stroke="#010101" stroke-miterlimit="10"><path d="M417.5 93.1l-9.6 9.7 9.6 9.7c.9.9 2.3.9 3.2 0 .9-.9.9-2.3 0-3.2l-6.1-6.2-1.8 1.2 7.9-8c.4-.4.7-1 .7-1.6 0-.6-.2-1.2-.7-1.6-.9-.8-2.3-.8-3.2 0zM443.9 93.1l9.6 9.7-9.6 9.7c-.9.9-2.3.9-3.2 0-.9-.9-.9-2.3 0-3.2l6.1-6.2 1.8 1.2-7.9-8c-.4-.4-.7-1-.7-1.6s.2-1.2.7-1.6c.9-.8 2.3-.8 3.2 0zM436.2 93.9c-.2-.5-.6-1-1.2-1.3-1.1-.5-2.5 0-2.9 1.2l-7 16.2c-.2.6-.2 1.2 0 1.7s.6 1 1.2 1.3c1.1.5 2.5 0 2.9-1.2l7-16.2c.3-.5.2-1.1 0-1.7z"/></g></svg>

Remote browsers push the limits a bit more. They aggressively optimize as much as possible providing a much larger benefit for the end user, but also a lot more trouble for developers. (If that bothers you try to remember that the proxy browsers exist because users need them, not because developers do.) These are the browsers you more typically think of when hearing the term "proxy browser". With the increase in browsers offering proxy services, I think referring to these as remote browsers can be a helpful way of distinguishing them.

Unlike their more conservative brethren, remote browsers are not content to merely make a few optimizations on the network side of things. They’ve got more ambitious goals.

When a website is requested through a remote browser, the request is routed through an intermediary server first before being forwarded on to the web server. Sounds familiar right? But here’s where remote browsers start to break away from the traditional browser model.

As that request returns to the server, instead of the intermediary server routing it back to the client, it proceeds to request all the subsequent resources needed to display the page as well. It then performs all parsing, rendering, layout and paint on the intermediary server. Finally, when all of that is taken care of, it sends back some sort of snapshot of that page to the client. This snapshot does not consist of HTML, CSS and JavaScript—it’s a proprietary format determined by whatever the browser happens to be.

That’s why calling them “remote browsers” makes so much sense. The browser as we know it is really contained on the server. The application on the phone or tablet is nothing more than a thin-client that is capable of serving up some proprietary format. It just so happens that when it serves that format up, it looks like a web page.

The most important thing to remember for remote browsers is that because all they are doing is displaying a snapshot of a page, _anything that might change the display of that page requires a trip back to the server so an updated snapshot can be generated_. We'll discuss that in more detail in a later post as the implications are huge and the source of most proxy browser induced headaches.

There are many options, but Opera Mini, UC Mini and Puffin are some of the more popular.

## What’s up next?
Understanding the basic architecture of proxy browsers makes testing on them so much easier and far more predictable. It's the key to understanding all of the atypical behavior that causes so many developers to cringe whenever they have to fire up a proxy browser for testing.

With the foundation laid, we can spend the next several posts digging deeper into the specific optimizations the two categories of proxy browsers make as well as consider the implications for developers.
